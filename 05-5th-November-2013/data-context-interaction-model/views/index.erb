<!doctype html>
<html lang="en">

	<head>
		<meta charset="utf-8">

		<title>DCI and Behavior Driven Development</title>

		<meta name="description" content="A framework for easily creating beautiful presentations using HTML">
		<meta name="author" content="Hakim El Hattab">

		<meta name="apple-mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

		<link rel="stylesheet" href="css/reveal.css">
		<link rel="stylesheet" href="css/theme/beige.css" id="theme">

		<!-- For syntax highlighting -->
		<link rel="stylesheet" href="lib/css/zenburn.css">

		<script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>

		<!-- If the query includes 'print-pdf', use the PDF print sheet -->
		<script>
			document.write( '<link rel="stylesheet" href="css/print/' + ( window.location.search.match( /print-pdf/gi ) ? 'pdf' : 'paper' ) + '.css" type="text/css" media="print">' );
		</script>


		<!--[if lt IE 9]>
		<script src="lib/js/html5shiv.js"></script>
		<![endif]-->
	</head>

	<body>

		<div class="reveal">

			<!-- Any section element inside of this container is displayed as a slide -->
			<div class="slides">

				<section>
					<h2>Clean Ruby & <br />Behavior Driven Software Development </h2>
				</section>

				<section>
					As a developer ... I've found 2 problems to be deeply frustrating
					
				</section>

				<section>
					<section>
						<h3>1) Lost In Translation</h3>
					</section>
					
					<section>
						Mental Modeling
						<br /><br />

						<div class="fragment"> an explanation of someone's thought process about how something works in the real world</div>

					</section>
					<section>
						Gentner & Stevens
						<br /><br />
						<li class="fragment">Incomplete</li>
						<li class="fragment">Difficult to mentally "run"</li>
						<li class="fragment">Unstable</li>
						<li class="fragment">Unscientific</li>
						<li class="fragment">Ungenerous (Favouring manual labour)</li>

					</section>

					<section>
						"Simply" and "Only"
						<br /><br />
						<div class="fragment">
							Reflects incorrect assumption about both the needs of the software & needs of business process itself
						</div>

					</section>

					<section>
						Hardest part of writing sotware : <div class="fragment">Communication</div>
					</section>

					<section>
					
						<li>The first "bug"</li>
						<li>Communicating the code with others / yourself 6 months from now</li>
						<li>What does a variable, method and class do?</li>
					
					</section>

				</section>

				<section>
					<section><h3>2) Yo Models so Fat ... </h3></section>

					<section>Heard of: Fat models skinny controllers?</section>

					<section>
						
						<h3>Problem</h3>
						<br /><br />
						
						<li>Model Obesity</li>
						<li>Confusing</li>
						<li>Every class should be Skinny !!!</li>

					</section>
					
					<section>
						
						<h2>The Waiter Example</h2>
						<br /><br />
						<div class="fragment">A Waiter = person + employee + waiter + cashier</div>

					</section>
					
					<section>
						<h2>The Waiter Example</h2>
						<pre><code data-trim contenteditable>
waiter = new Waiter
waiter.public_methods(false)
=> ["walk_to_custer", "take_order"]

waiter.public_methods
=> ["walk_to_custer", "take_order", "send_bill", "print_receipt", "collect_salary"]
						</code></pre>

					</section>				

					<section>
						Example
						<br /><br />
						find . -name '*.rb' | xargs wc -l
					</section>
			
				</section>

				<section>
					
					<section><h2>Solution</h2></section>
					
					<section>
						<li>Code for readability</li>
						<li>Code for change</li>
						<li>Seperate the Being & Doing</li>
					</section>
				</section>

				<section>
					<section>
						<h2>Data-Context-Interaction (DCI)</h2>
						<br /><br />
						<div class="fragment">Brainchild of Trygve Reenskaug (created MVC)</div>
					</section>

					<section>Improve readability of code</section>
					<section>Seperate code for rapidly changing system behavior</section>
					<section>Helps software developers to reason about system-level state and behavior (instead of object state & behavior)</section>
					<section>Object style that's close to mental models</section>						
					
					<section><h3>Data</h3></section>
					<section>Representation of the object with Single Responsibility Principle (SRP)</section>
					<section>Should never change unless our representation of user changes</section>
					<section>Lack "smart" data, which are usually results of certain "use cases"</section>
					<section>Encapsulate physical storage & interaction with the data</section>

					<section>
						<h2>Bank Account Example</h2>
						<pre><code data-trim contenteditable>
class Account
	attr_accesssor :balance

	def increase_balance(amount)
	end

	def decrease_balance(amount)
	end

	# NO method for transactions (e.g. deposit/transfer)
end
						</code></pre>
					</section>


					<section><h3>Context</h3></section>
					<section>Contains & explain Roles, Scenario & Use cases</section>
					<section>Methods that encapsulate use cases</section>
					<section>Maps Roles to Data Objects for each use cases</section>

					<section>
						<h2>Money Transfer between Bank Accounts</h2>
						<pre><code data-trim contenteditable>
class MoneyTransfer
	def initialize(source,destination)
		@source = source
		@destination = destination
		assign_transferrer(@source)
	end
	
	def execute(amount)
		@source.transfer_to(@destination, amount)
	end

	private
	
	def assign_transferrer(account)
		account.extend(Transferrer)
	end
	
	# Methodful Role
	module Transferrer
		def transfer_to(destination, amount)
		end
	end
end
						</code></pre>
					</section>

					<section><h3>Interaction (roles)</h3></section>
					<section>What a system does</section>
					<section>Only addresses another object in terms of its (methodless) Role</section>
					<section>A stateless programming construct that corresponds to user's mental model</section>
					<section>Represents a collection of responsibilities</section>

				</section>
	
			</section>

				
			</div>

		</div>

		<script src="lib/js/head.min.js"></script>
		<script src="js/reveal.min.js"></script>

		<script>

			// Full list of configuration options available here:
			// https://github.com/hakimel/reveal.js#configuration
			Reveal.initialize({
				controls: true,
				progress: true,
				history: true,
				center: true,

				theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
				transition: Reveal.getQueryHash().transition || 'default', // default/cube/page/concave/zoom/linear/fade/none

				// Optional libraries used to extend on reveal.js
				dependencies: [
					{ src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
					{ src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
					{ src: 'plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
					{ src: 'plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }
					// { src: 'plugin/search/search.js', async: true, condition: function() { return !!document.body.classList; } }
					// { src: 'plugin/remotes/remotes.js', async: true, condition: function() { return !!document.body.classList; } }
				]
			});

		</script>

	</body>
</html>
